{"version":3,"sources":["assets/cloudy.png","logo.svg","componenet/Navbar.js","componenet/Search.jsx","componenet/Winfo.jsx","componenet/Wdetails.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","navbar","props","className","text","Search","updateInput","fetchData","onChange","event","target","value","type","placeholder","onClick","Winfo","data","src","image","alt","height","width","name","Wdetails","Math","floor","main","temp","weather","description","wind","speed","App","useState","input","setInput","setData","a","axios","get","response","alert","Navbar","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gFAAAA,EAAOC,QAAU,IAA0B,oC,4ECA3CD,EAAOC,QAAU,IAA0B,kC,wICO5BC,G,YALC,SAACC,GAChB,OACC,yBAAKC,UAAU,UAAUD,EAAME,QCOlBC,EATA,SAAC,GAA8B,IAA7BC,EAA4B,EAA5BA,YAAaC,EAAe,EAAfA,UAC7B,OACC,yBAAKJ,UAAU,kBACd,2BAAOK,SAAU,SAACC,GAASH,EAAYG,EAAMC,OAAOC,QAASC,KAAK,OAAOC,YAAY,gCAA+B,4BAAQC,QAAS,kBAAIP,KAAaJ,UAAU,cAA5C,Y,iBCMxGY,EARD,SAAC,GAAY,IAAXC,EAAU,EAAVA,KACf,OAAQ,yBAAKb,UAAU,gBACtB,yBAAKc,IAAKC,IAAOC,IAAI,SAASC,OAAO,QAAQC,MAAM,UACnD,yBAAKlB,UAAU,aAAaa,EAAKM,QCYpBC,EAhBE,SAAC,GAAY,IAAXP,EAAU,EAAVA,KAClB,OAAQ,yBAAKb,UAAU,mBAEtB,yBAAKA,UAAU,eAAf,eACC,yBAAKA,UAAU,uBAAf,UAAyCqB,KAAKC,MAAMT,EAAKU,KAAKC,KAAM,QAApE,UAED,yBAAKxB,UAAU,WAAf,WACC,yBAAKA,UAAU,aAAaa,EAAKY,QAAQ,GAAGC,cAE7C,yBAAK1B,UAAU,QAAf,QACC,yBAAKA,UAAU,gBAAf,UAAkCa,EAAKc,KAAKC,MAA5C,a,iBCwCYC,MA3Cf,WAAe,MAEYC,mBAAS,IAFrB,mBAENC,EAFM,KAEAC,EAFA,OAGUF,mBAAS,MAHnB,mBAGNjB,EAHM,KAGDoB,EAHC,KAQP7B,EAAS,uCAAI,4BAAA8B,EAAA,4DAEA,kDACF,mCAHE,kBAKSC,IAAMC,IAAN,UAHT,kDAGS,cAA2BL,EAA3B,kBAFX,qCAHE,OAKTM,EALS,OAOjBJ,EAAQI,EAASxB,MAPA,gDAYjByB,MAAM,EAAD,IAZY,yDAAJ,qDAef,OACE,6BACF,kBAACC,EAAD,CAAQtC,KAAK,gBACb,yBAAKD,UAAU,kBACb,yBAAKA,UAAU,qBACb,kBAAC,EAAD,CAAQG,YAxBQ,SAACF,GACnB+B,EAAS/B,IAuB2BG,UAAWA,IAG5CS,EACC,oCACE,kBAAC,EAAD,CAAOA,KAAMA,IACd,kBAAC,EAAD,CAAUA,KAAMA,KAEnB,2ECjCc2B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.f942893d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/cloudy.a723d865.png\";","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\n\n const navbar = (props) => {\n\treturn (\n\t\t<div className=\"navbar\">{props.text}</div>\n\t\t)\n};\nexport default navbar;","import React from 'react';\n\nconst Search = ({updateInput, fetchData}) => {\n\treturn (\n\t\t<div className=\"weather-search\">\n\t\t\t<input onChange={(event)=>{updateInput(event.target.value)}} type=\"text\" placeholder=\"Enter the name of your city\"/><button onClick={()=>fetchData()} className=\"search-btn\">Search</button>\n\t\t</div>\n\t\t)\n}\n\n\nexport default Search ;\n","import React from 'react';\nimport image from '../assets/cloudy.png'\n\nconst Winfo = ({data}) => {\n\treturn (<div className=\"weather-info\">\n\t\t<img src={image} alt=\"Cloudy\" height='200px' width=\"200px\"/>\n\t\t<div className=\"city-name\">{data.name}</div>\n\t</div>)\n}\n\n\nexport default Winfo;","import React from 'react'\n\nconst Wdetails = ({data}) => {\n\treturn (<div className=\"weather-details\">\n\n\t\t<div className=\"temperature\">Temperature:\n\t\t\t<div className=\"temperature-details\">{`${Math.floor(data.main.temp -273.15)}Â°`}</div>\n\t\t</div>\n\t\t<div className=\"weather\">Weather:\n\t\t\t<div className=\"weather-d\">{data.weather[0].description}</div>\n\t\t</div>\n\t\t<div className=\"wind\">Wind:\n\t\t\t<div className=\"wind-details\">{`${data.wind.speed} Km/h`}</div>\n\t\t</div>\n\t\t</div>)\n}\n\n\nexport default Wdetails;","import React, {useState} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Navbar from './componenet/Navbar.js'\nimport Search from './componenet/Search.jsx'\nimport Winfo from './componenet/Winfo.jsx'\nimport Wdetails from './componenet/Wdetails.jsx'\nimport axios from 'axios';\n\nfunction App() {\n    // get the value of the user \n  const [input,setInput] = useState('');\n  const [data,setData] = useState(null);\n  const updateInput = (text) => {\n    setInput(text);\n  }\n\n  const fetchData =  async () => {\n    // API CALL \n    const endPoint = \"https://api.openweathermap.org/data/2.5/weather\"\n    const apiKey = \"ee5764b807085b6dedd49f2e1abbcf0e\"\n    try {\n      const response =  await axios.get(`${endPoint}?q=${input}&appid=${apiKey}`)\n\n    setData(response.data);\n    \n      \n\n  } catch (err) {\n    alert(err);\n  }\n  }\n  return (\n    <div>\n  <Navbar text='Weather App'/>\n  <div className=\"page-container\">\n    <div className=\"weather-container\">\n      <Search updateInput={updateInput} fetchData={fetchData}/>\n\n\n      {data? \n        <>\n          <Winfo data={data}/>\n         <Wdetails data={data}/>\n        </>:\n      <div>Please enter a city to display weather</div>}\n      \n    </div>\n  </div>\n  </div>);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}